/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var OWNER = "$name"; 
				var STEPSDONE=0;
				var N = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name request engage")
						request("engage", "engage($OWNER,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="inHome",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="handleEngageRefused",cond=whenReply("engagerefused"))
				}	 
				state("handleEngageRefused") { //this:State
					action { //it:State
						CommUtils.outblack("engage $name refused")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("inHome") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - waiting in home...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="execGetrp",cond=whenDispatch("getrp"))
					transition(edgeName="t03",targetState="execGetAsh",cond=whenDispatch("getash"))
				}	 
				state("execGetrp") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getrp(MOVE)"), Term.createTerm("getrp(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name - Moving to the WASTEIN PORT")
								delay(2000) 
								CommUtils.outgreen("$name - getting a rp")
								delay(2000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="burninPort", cond=doswitch() )
				}	 
				state("execGetAsh") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getash(MOVE)"), Term.createTerm("getash(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name - Moving to the BORNOUT PORT")
								delay(2000) 
								CommUtils.outgreen("$name - extract ash")
								delay(2000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ashoutPort", cond=doswitch() )
				}	 
				state("burninPort") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - Moving to the BURNIN PORT")
						delay(2000) 
						CommUtils.outgreen("$name - depositing a rp")
						delay(2000) 
						forward("endburnindeposit", "endburnindeposit(50)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="moveToHome",cond=whenDispatch("gohome"))
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - Moving to HOME")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="inHome", cond=doswitch() )
				}	 
				state("ashoutPort") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - Moving to the ASHOUT PORT")
						delay(2000) 
						CommUtils.outgreen("$name - depositing ash")
						delay(2000) 
						forward("endashdeposit", "endashdeposit(50)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="moveToHome",cond=whenDispatch("gohome"))
					transition(edgeName="t06",targetState="execGetrp",cond=whenDispatch("getrp"))
				}	 
			}
		}
} 
