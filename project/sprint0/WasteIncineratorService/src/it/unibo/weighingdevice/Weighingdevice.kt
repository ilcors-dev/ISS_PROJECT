/* Generated by AN DISI Unibo */ 
package it.unibo.weighingdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Weighingdevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				lateinit var reader : java.io.BufferedReader
			    lateinit var p : Process	
			    var Weight = 0
			    var PreviousWeight = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | scale starts")
						
									p       = Runtime.getRuntime().exec("python scale.py")
									reader  = java.io.BufferedReader(java.io.InputStreamReader(p.getInputStream()))	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readScaleData", cond=doswitch() )
				}	 
				state("readScaleData") { //this:State
					action { //it:State
						 
									var data = reader.readLine()
									CommUtils.outyellow("$name with python: data = $data") 
									if(data != null) {
										try { 
											val vd = data.toFloat()
											val v = vd.toInt()
											Weight = v
										} catch(e: Exception) {
											CommUtils.outred("$name readScaleDataERROR: $e ")
										}
									}
						if(  Weight > 0 && Weight != PreviousWeight  
						 ){ PreviousWeight = Weight  
						CommUtils.outyellow("$name with python: data = $data")
						emit("scaleData", "weight($Weight)" ) 
						}
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readScaleData", cond=doswitch() )
				}	 
			}
		}
} 
