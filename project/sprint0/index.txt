ANALISI DEI REQUISITI:

L'inceneritore può inviare e ricevere messaggi.
Da requisito, le informazioni emesse dall'inceneritore sono un evento. 
Cosa riceve l'inceneritore per attivarsi e bruciare la spazzatura? E chi gli manda il messaggio?

  COMPORTAMENTO INCENERITORE:
  L'inceneritore si attiva attraverso un comando wireless, processa un RP in BTIME secondi e alla fine emette un fischio (evento) percepito dall'OpRobot e dal WIS.

  COMPORTAMENTO OPROBOT:
  è chiaro

  MANAGEMENT DEI CONTAINER:
  Ci sono 2 devices che comunicano con il WIS, uno è una bilancia (Scale) nel magazzino della spazzatura e l'altro è un Sonar nel magazzino della cenere.
  Ci sono 2 agenti esterni, uno che inserisce la spazzatura nel magazzino della spazzatura e un altro che si occupa di rimuovere la cenere dal magazzino della cenere.
  Se il valore di Scale è circa uguale a 0, allora vuol dire che non c'è spazzatura.
  Il Sonar si occupa di segnalare il livello di cenere nel magazzino. I requisiti riportano che nel magazzino può entrarci la cenere prodotta da 3-4 RP.
  Cosa significa PIENO? Quanta cenere produce un pacchetto? Per capire di quanto aumenta il livello della cenere quando il robot la deposita

  GUI:
  è chiaro

  COMPORTAMENTO MONITORING DEVICE:
  c'è un Led, ci devono essere delle priorità? E se sì, in quale modo?
  Esempio: all'inizio, il robot prende la spazzatura e la porta nell'inceneritore, quindi il Led dovrebbe essere acceso perchè l'inceneritore sta bruciando, ma nello stesso momento il container della
  cenere è vuoto, quindi il Led dovrebbe lampeggiare.

SOSTANTIVI/ENTITA':
  - WIS                       -- ACTOR
  - OpRobot                   -- ACTOR
  - Incinerator               -- ACTOR
  - Service Area              -- POJO (appartiene a WIS)
  - Waste Storage Container   -- POJO (appartiene al weighing device)
  - Roll Packets              -- NULLA (MA FORSE POJO)
  - Ash Storage Container     -- POJO (appartiene a monitoring device)
  - Monitoring Device         -- ACTOR
  - Sonar                     -- POJO (appartiene a monitoring device)
  - Warning Device            -- ACTOR 
  - Led                       -- POJO (appartiene a warning device)
  
  - BURNIN port               -- SONO POSIZIONI, non li consideriamo come pojo / actors perchè è dove si muove il robot nei vari scenari
  - BURNOUT port              -- SONO POSIZIONI, non li consideriamo come pojo / actors perchè è dove si muove il robot nei vari scenari
  - WASTEIN port              -- SONO POSIZIONI, non li consideriamo come pojo / actors perchè è dove si muove il robot nei vari scenari
  - ASHOUT port               -- SONO POSIZIONI, non li consideriamo come pojo / actors perchè è dove si muove il robot nei vari scenari
  - HOME location             -- SONO POSIZIONI, non li consideriamo come pojo / actors perchè è dove si muove il robot nei vari scenari
  - Scale                     -- POJO (appartiene a weighing device)
  - Weighing device           -- ACTOR
  - External Agent WasteStorage -- ACTOR
  - External Agent AshStorage   -- ACTOR

VERBI/AZIONI:
  - Perceive (Incinerator)
  non lo sappiamo yet
  - Burning (Incinerator)
    - evento globale al WIS, che aggiornerà a sua volta il WARNING DEVICE tramite una dispatch per accendere / spegnere il POJO LED
  - Emits (Incinerator)
    - evento globale al WIS, che aggiornerà a sua volta l'OpRobot attraverso una dispatch
  - Move to the WASTEIN port & get RP (OpRobot)
    - dispatch
    la move e la get si potrebbero lasciare separate, ma le uniamo perchè attualmente l'unico scopo della porta WASTEIN è di prelevare un RP. nel caso
    in cui l'OpRobot dovesse fare altro prima di prelevare un RP, allora le separeremmo
  - Move to the BURNIN port & deposit (OpRobot & OpRobot:incenerator)
    - dispatch
    la move e la deposit si potrebbero lasciare separate, ma le uniamo perchè attualmente l'unico scopo della porta WASTEIN è di prelevare un RP. nel caso
    in cui l'OpRobot dovesse fare altro prima di prelevare un RP, allora le separeremmo
  - Move to the HOME location (OpRobot)
    - dispatch
  - Move to the BURNOUT port & extract (OpRobot & OpRobot:incenerator)
    - dispatch
    la move e la extract si potrebbero lasciare separate, ma le uniamo perchè attualmente l'unico scopo della porta WASTEIN è di prelevare un RP. nel caso
    in cui l'OpRobot dovesse fare altro prima di prelevare un RP, allora le separeremmo
  - Move to the ASHOUT port & deposit (OpRobot & OpRobot:AshStorage)
    - dispatch
    la move e la deposit si potrebbero lasciare separate, ma le uniamo perchè attualmente l'unico scopo della porta WASTEIN è di prelevare un RP. nel caso
    in cui l'OpRobot dovesse fare altro prima di prelevare un RP, allora le separeremmo
  - Reports (Weighing Device)
    - dispatch
  - Measures (Sonar)
    - Event (va dentro all'attore del Raspberry)
  - IsConsideredFull (AshStorage)
    - request fatta dal WIS->AshStorage
  - IsOn (Led)
    - request fatta dal WIS->Monitoring Device
  - IsOff (Led)
    - request fatta dal WIS->Monitoring Device
  - Blinks (Led)
    - request fatta dal WIS->Monitoring Device
  - IsEmpty (AshStorage)
    - request fatta dal WIS->AshStorage
  - PutInto (External Agent WasteStorage)
    - dispatch->WasteStorage
  - Remove (External Agent AshStorage)
    - dispatch->AshStorage

NEXT STEPS:
Scrivere comportamento degli attori restanti
Leggendo la UserStory dobbiamo ipotizzare un TestPlan.
Altro?
Fine Sprint0
-------------------------------------------------------------------------------------------------------------------------------------------------------

12/07/2024
Scritto comportamento di:
  - Incinerator, è in attesa del WIS che gli dice di partire (StartIncinerator), dopo BTIME secondi finisce e avvisa il WIS (FinishBurning), ritorna allo stato iniziale.
  - MonitoringDevice, (abbiamo eliminato WarningDevice e unito il tutto), abbiamo creato monitoringdevice.qak che viene usato come attore esterno. L'evento Measure viene lanciato dal sonar al WIS ogni qualvolta si verifica un cambio del valore misurato dal Sonar. Il MonitoringDevice farà da Observer che riceverà evento e lancerà dispatch al WIS. Il WIS decreterà se è stata raggiunta la soglia.
      Il led si trova sul Raspberry, perciò verrà gestito indipendentemente, non sarà il WIS a comandarlo: usa i parametri del Sonar ma anche l'evento dell'inceneritore. Perciò creiamo anche un observer per il led/monitoringDevice.
  - WeighingDevice, observer che riceve evento dall'attore esterno weighingdevice.qak e lancia dispatch rpInWaste contenente rpCount=weight/WRP (dove WRP=50kg e weight è il parametro dell'evento). L'evento del WeighingDevice deve essere inviato ogni qualvolta si verifica un cambio del valore misurato da Scale.

Creato 2 file Python, sonar.py e scale,py, che fungono da mock e creano valori casuali che verrano utilizzati come misure dai qak.

18/07/2024
Scritto comportamento del WIS.
WIS: Si inizializzano variabili e poi si controlla lo stato (checkStatus). Da qui, si controllano le variabili e a seconda del dispatch ricevuto:
    - si aggiorna il counter degli rp (updateRPCount)
    - si controlla e si aggiorna l'ashlevel
    - si controlla lo status dell'inceneritore (se ha iniziato a bruciare o ha appena finito) e si fa muovere oprobot

xx Variabile INHOME messa al fine di sapere se l'oprobot è in home per evitare di mandargli messaggi inutili in checkStatus, verrà poi sostituita dal sistema di posizionamento dell'oprobot da implementare successivamente. Per adesso oprobot dice quando è nlla home e lo comunica al wis che si occuperà di aggiornare lo status.
xx Argomenti (X,Y) momentaneamente usati, ma andranno sostituiti dal sistema di posizionamento

-----------------------------------------------------------------------------------------------------------------------------------------------------
Scrittura documento Sprint0:
- Scritta prima parte dell'analisi dei requisiti (da controllare)
- Scrivere Analisi delle User Stories, Modello del sistema, Piani di testing, Piano di lavoro
- generare schemini qak



NEXT STEPS:
Leggendo la UserStory dobbiamo ipotizzare un TestPlan.
Controllare commenti nel codice e tradurli tutti in inglese
Scrivere documento
Fine Sprint0

*** nello sprint successivo: 
    - Sistema di posizionamento
